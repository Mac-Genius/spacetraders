// SpaceTraders v2.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.2
// source: faction_trait.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FactionTraitSymbol int32

const (
	FactionTraitSymbol_BUREAUCRATIC             FactionTraitSymbol = 0
	FactionTraitSymbol_SECRETIVE                FactionTraitSymbol = 1
	FactionTraitSymbol_CAPITALISTIC             FactionTraitSymbol = 2
	FactionTraitSymbol_INDUSTRIOUS              FactionTraitSymbol = 3
	FactionTraitSymbol_PEACEFUL                 FactionTraitSymbol = 4
	FactionTraitSymbol_DISTRUSTFUL              FactionTraitSymbol = 5
	FactionTraitSymbol_WELCOMING                FactionTraitSymbol = 6
	FactionTraitSymbol_SMUGGLERS                FactionTraitSymbol = 7
	FactionTraitSymbol_SCAVENGERS               FactionTraitSymbol = 8
	FactionTraitSymbol_REBELLIOUS               FactionTraitSymbol = 9
	FactionTraitSymbol_EXILES                   FactionTraitSymbol = 10
	FactionTraitSymbol_PIRATES                  FactionTraitSymbol = 11
	FactionTraitSymbol_RAIDERS                  FactionTraitSymbol = 12
	FactionTraitSymbol_CLAN                     FactionTraitSymbol = 13
	FactionTraitSymbol_GUILD                    FactionTraitSymbol = 14
	FactionTraitSymbol_DOMINION                 FactionTraitSymbol = 15
	FactionTraitSymbol_FRINGE                   FactionTraitSymbol = 16
	FactionTraitSymbol_FORSAKEN                 FactionTraitSymbol = 17
	FactionTraitSymbol_ISOLATED                 FactionTraitSymbol = 18
	FactionTraitSymbol_LOCALIZED                FactionTraitSymbol = 19
	FactionTraitSymbol_ESTABLISHED              FactionTraitSymbol = 20
	FactionTraitSymbol_NOTABLE                  FactionTraitSymbol = 21
	FactionTraitSymbol_DOMINANT                 FactionTraitSymbol = 22
	FactionTraitSymbol_INESCAPABLE              FactionTraitSymbol = 23
	FactionTraitSymbol_INNOVATIVE               FactionTraitSymbol = 24
	FactionTraitSymbol_BOLD                     FactionTraitSymbol = 25
	FactionTraitSymbol_VISIONARY                FactionTraitSymbol = 26
	FactionTraitSymbol_CURIOUS                  FactionTraitSymbol = 27
	FactionTraitSymbol_DARING                   FactionTraitSymbol = 28
	FactionTraitSymbol_EXPLORATORY              FactionTraitSymbol = 29
	FactionTraitSymbol_RESOURCEFUL              FactionTraitSymbol = 30
	FactionTraitSymbol_FLEXIBLE                 FactionTraitSymbol = 31
	FactionTraitSymbol_COOPERATIVE              FactionTraitSymbol = 32
	FactionTraitSymbol_UNITED                   FactionTraitSymbol = 33
	FactionTraitSymbol_STRATEGIC                FactionTraitSymbol = 34
	FactionTraitSymbol_INTELLIGENT              FactionTraitSymbol = 35
	FactionTraitSymbol_RESEARCH_FOCUSED         FactionTraitSymbol = 36
	FactionTraitSymbol_COLLABORATIVE            FactionTraitSymbol = 37
	FactionTraitSymbol_PROGRESSIVE              FactionTraitSymbol = 38
	FactionTraitSymbol_MILITARISTIC             FactionTraitSymbol = 39
	FactionTraitSymbol_TECHNOLOGICALLY_ADVANCED FactionTraitSymbol = 40
	FactionTraitSymbol_AGGRESSIVE               FactionTraitSymbol = 41
	FactionTraitSymbol_IMPERIALISTIC            FactionTraitSymbol = 42
	FactionTraitSymbol_TREASURE_HUNTERS         FactionTraitSymbol = 43
	FactionTraitSymbol_DEXTEROUS                FactionTraitSymbol = 44
	FactionTraitSymbol_UNPREDICTABLE            FactionTraitSymbol = 45
	FactionTraitSymbol_BRUTAL                   FactionTraitSymbol = 46
	FactionTraitSymbol_FLEETING                 FactionTraitSymbol = 47
	FactionTraitSymbol_ADAPTABLE                FactionTraitSymbol = 48
	FactionTraitSymbol_SELF_SUFFICIENT          FactionTraitSymbol = 49
	FactionTraitSymbol_DEFENSIVE                FactionTraitSymbol = 50
	FactionTraitSymbol_PROUD                    FactionTraitSymbol = 51
	FactionTraitSymbol_DIVERSE                  FactionTraitSymbol = 52
	FactionTraitSymbol_INDEPENDENT              FactionTraitSymbol = 53
	FactionTraitSymbol_SELF_INTERESTED          FactionTraitSymbol = 54
	FactionTraitSymbol_FRAGMENTED               FactionTraitSymbol = 55
	FactionTraitSymbol_COMMERCIAL               FactionTraitSymbol = 56
	FactionTraitSymbol_FREE_MARKETS             FactionTraitSymbol = 57
	FactionTraitSymbol_ENTREPRENEURIAL          FactionTraitSymbol = 58
)

// Enum value maps for FactionTraitSymbol.
var (
	FactionTraitSymbol_name = map[int32]string{
		0:  "BUREAUCRATIC",
		1:  "SECRETIVE",
		2:  "CAPITALISTIC",
		3:  "INDUSTRIOUS",
		4:  "PEACEFUL",
		5:  "DISTRUSTFUL",
		6:  "WELCOMING",
		7:  "SMUGGLERS",
		8:  "SCAVENGERS",
		9:  "REBELLIOUS",
		10: "EXILES",
		11: "PIRATES",
		12: "RAIDERS",
		13: "CLAN",
		14: "GUILD",
		15: "DOMINION",
		16: "FRINGE",
		17: "FORSAKEN",
		18: "ISOLATED",
		19: "LOCALIZED",
		20: "ESTABLISHED",
		21: "NOTABLE",
		22: "DOMINANT",
		23: "INESCAPABLE",
		24: "INNOVATIVE",
		25: "BOLD",
		26: "VISIONARY",
		27: "CURIOUS",
		28: "DARING",
		29: "EXPLORATORY",
		30: "RESOURCEFUL",
		31: "FLEXIBLE",
		32: "COOPERATIVE",
		33: "UNITED",
		34: "STRATEGIC",
		35: "INTELLIGENT",
		36: "RESEARCH_FOCUSED",
		37: "COLLABORATIVE",
		38: "PROGRESSIVE",
		39: "MILITARISTIC",
		40: "TECHNOLOGICALLY_ADVANCED",
		41: "AGGRESSIVE",
		42: "IMPERIALISTIC",
		43: "TREASURE_HUNTERS",
		44: "DEXTEROUS",
		45: "UNPREDICTABLE",
		46: "BRUTAL",
		47: "FLEETING",
		48: "ADAPTABLE",
		49: "SELF_SUFFICIENT",
		50: "DEFENSIVE",
		51: "PROUD",
		52: "DIVERSE",
		53: "INDEPENDENT",
		54: "SELF_INTERESTED",
		55: "FRAGMENTED",
		56: "COMMERCIAL",
		57: "FREE_MARKETS",
		58: "ENTREPRENEURIAL",
	}
	FactionTraitSymbol_value = map[string]int32{
		"BUREAUCRATIC":             0,
		"SECRETIVE":                1,
		"CAPITALISTIC":             2,
		"INDUSTRIOUS":              3,
		"PEACEFUL":                 4,
		"DISTRUSTFUL":              5,
		"WELCOMING":                6,
		"SMUGGLERS":                7,
		"SCAVENGERS":               8,
		"REBELLIOUS":               9,
		"EXILES":                   10,
		"PIRATES":                  11,
		"RAIDERS":                  12,
		"CLAN":                     13,
		"GUILD":                    14,
		"DOMINION":                 15,
		"FRINGE":                   16,
		"FORSAKEN":                 17,
		"ISOLATED":                 18,
		"LOCALIZED":                19,
		"ESTABLISHED":              20,
		"NOTABLE":                  21,
		"DOMINANT":                 22,
		"INESCAPABLE":              23,
		"INNOVATIVE":               24,
		"BOLD":                     25,
		"VISIONARY":                26,
		"CURIOUS":                  27,
		"DARING":                   28,
		"EXPLORATORY":              29,
		"RESOURCEFUL":              30,
		"FLEXIBLE":                 31,
		"COOPERATIVE":              32,
		"UNITED":                   33,
		"STRATEGIC":                34,
		"INTELLIGENT":              35,
		"RESEARCH_FOCUSED":         36,
		"COLLABORATIVE":            37,
		"PROGRESSIVE":              38,
		"MILITARISTIC":             39,
		"TECHNOLOGICALLY_ADVANCED": 40,
		"AGGRESSIVE":               41,
		"IMPERIALISTIC":            42,
		"TREASURE_HUNTERS":         43,
		"DEXTEROUS":                44,
		"UNPREDICTABLE":            45,
		"BRUTAL":                   46,
		"FLEETING":                 47,
		"ADAPTABLE":                48,
		"SELF_SUFFICIENT":          49,
		"DEFENSIVE":                50,
		"PROUD":                    51,
		"DIVERSE":                  52,
		"INDEPENDENT":              53,
		"SELF_INTERESTED":          54,
		"FRAGMENTED":               55,
		"COMMERCIAL":               56,
		"FREE_MARKETS":             57,
		"ENTREPRENEURIAL":          58,
	}
)

func (x FactionTraitSymbol) Enum() *FactionTraitSymbol {
	p := new(FactionTraitSymbol)
	*p = x
	return p
}

func (x FactionTraitSymbol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FactionTraitSymbol) Descriptor() protoreflect.EnumDescriptor {
	return file_faction_trait_proto_enumTypes[0].Descriptor()
}

func (FactionTraitSymbol) Type() protoreflect.EnumType {
	return &file_faction_trait_proto_enumTypes[0]
}

func (x FactionTraitSymbol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FactionTraitSymbol.Descriptor instead.
func (FactionTraitSymbol) EnumDescriptor() ([]byte, []int) {
	return file_faction_trait_proto_rawDescGZIP(), []int{0}
}

type FactionTrait struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol      FactionTraitSymbol `protobuf:"varint,1,opt,name=symbol,proto3,enum=macgenius.spacetraders.api.FactionTraitSymbol" json:"symbol,omitempty"` // The unique identifier of the trait.
	Name        string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         // The name of the trait.
	Description string             `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                           // A description of the trait.
}

func (x *FactionTrait) Reset() {
	*x = FactionTrait{}
	if protoimpl.UnsafeEnabled {
		mi := &file_faction_trait_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FactionTrait) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FactionTrait) ProtoMessage() {}

func (x *FactionTrait) ProtoReflect() protoreflect.Message {
	mi := &file_faction_trait_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FactionTrait.ProtoReflect.Descriptor instead.
func (*FactionTrait) Descriptor() ([]byte, []int) {
	return file_faction_trait_proto_rawDescGZIP(), []int{0}
}

func (x *FactionTrait) GetSymbol() FactionTraitSymbol {
	if x != nil {
		return x.Symbol
	}
	return FactionTraitSymbol_BUREAUCRATIC
}

func (x *FactionTrait) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FactionTrait) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_faction_trait_proto protoreflect.FileDescriptor

var file_faction_trait_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6d, 0x61, 0x63, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73,
	0x2e, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x61, 0x70,
	0x69, 0x22, 0x8c, 0x01, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61,
	0x69, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x61, 0x63, 0x67, 0x65, 0x6e, 0x69, 0x75, 0x73, 0x2e, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2a, 0xb8, 0x07, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x55, 0x52, 0x45, 0x41,
	0x55, 0x43, 0x52, 0x41, 0x54, 0x49, 0x43, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43,
	0x52, 0x45, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x49,
	0x54, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x44, 0x55, 0x53, 0x54, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x45, 0x41, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53,
	0x54, 0x52, 0x55, 0x53, 0x54, 0x46, 0x55, 0x4c, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45,
	0x4c, 0x43, 0x4f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x4d, 0x55,
	0x47, 0x47, 0x4c, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43, 0x41, 0x56,
	0x45, 0x4e, 0x47, 0x45, 0x52, 0x53, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x42, 0x45,
	0x4c, 0x4c, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x4c,
	0x45, 0x53, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x49, 0x52, 0x41, 0x54, 0x45, 0x53, 0x10,
	0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x41, 0x49, 0x44, 0x45, 0x52, 0x53, 0x10, 0x0c, 0x12, 0x08,
	0x0a, 0x04, 0x43, 0x4c, 0x41, 0x4e, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x55, 0x49, 0x4c,
	0x44, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x4e, 0x10,
	0x0f, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x4e, 0x47, 0x45, 0x10, 0x10, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x4f, 0x52, 0x53, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x53, 0x54, 0x41,
	0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x4d, 0x49, 0x4e, 0x41,
	0x4e, 0x54, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x45, 0x53, 0x43, 0x41, 0x50, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x4e, 0x4f, 0x56, 0x41, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4c, 0x44, 0x10, 0x19, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x1a, 0x12, 0x0b,
	0x0a, 0x07, 0x43, 0x55, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x1c, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x50, 0x4c, 0x4f,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x1d, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x46, 0x55, 0x4c, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x45,
	0x58, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x20, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4e, 0x49, 0x54,
	0x45, 0x44, 0x10, 0x21, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x49,
	0x43, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x47, 0x45,
	0x4e, 0x54, 0x10, 0x23, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x45, 0x44, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f,
	0x4c, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x25, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x26, 0x12, 0x10,
	0x0a, 0x0c, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x27,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x45, 0x43, 0x48, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41,
	0x4c, 0x4c, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x28, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x45, 0x53, 0x53, 0x49, 0x56, 0x45, 0x10, 0x29, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4d, 0x50, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10,
	0x2a, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x48, 0x55,
	0x4e, 0x54, 0x45, 0x52, 0x53, 0x10, 0x2b, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4f, 0x55, 0x53, 0x10, 0x2c, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x52, 0x45, 0x44,
	0x49, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x2d, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x55,
	0x54, 0x41, 0x4c, 0x10, 0x2e, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4c, 0x45, 0x45, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x2f, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x41, 0x50, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x30, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x53, 0x55, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x31, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x53, 0x49, 0x56, 0x45, 0x10, 0x32, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x4f, 0x55, 0x44, 0x10,
	0x33, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x34, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x35, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x36, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x45, 0x44, 0x10, 0x37, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49,
	0x41, 0x4c, 0x10, 0x38, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x53, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e, 0x54, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x4e, 0x45, 0x55, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x3a, 0x42, 0x28, 0x5a, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x69, 0x75, 0x73, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_faction_trait_proto_rawDescOnce sync.Once
	file_faction_trait_proto_rawDescData = file_faction_trait_proto_rawDesc
)

func file_faction_trait_proto_rawDescGZIP() []byte {
	file_faction_trait_proto_rawDescOnce.Do(func() {
		file_faction_trait_proto_rawDescData = protoimpl.X.CompressGZIP(file_faction_trait_proto_rawDescData)
	})
	return file_faction_trait_proto_rawDescData
}

var file_faction_trait_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_faction_trait_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_faction_trait_proto_goTypes = []interface{}{
	(FactionTraitSymbol)(0), // 0: macgenius.spacetraders.api.FactionTraitSymbol
	(*FactionTrait)(nil),    // 1: macgenius.spacetraders.api.FactionTrait
}
var file_faction_trait_proto_depIdxs = []int32{
	0, // 0: macgenius.spacetraders.api.FactionTrait.symbol:type_name -> macgenius.spacetraders.api.FactionTraitSymbol
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_faction_trait_proto_init() }
func file_faction_trait_proto_init() {
	if File_faction_trait_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_faction_trait_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FactionTrait); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_faction_trait_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_faction_trait_proto_goTypes,
		DependencyIndexes: file_faction_trait_proto_depIdxs,
		EnumInfos:         file_faction_trait_proto_enumTypes,
		MessageInfos:      file_faction_trait_proto_msgTypes,
	}.Build()
	File_faction_trait_proto = out.File
	file_faction_trait_proto_rawDesc = nil
	file_faction_trait_proto_goTypes = nil
	file_faction_trait_proto_depIdxs = nil
}
